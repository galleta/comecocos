/*
 * ComecocosFrame.java
 *
 * Created on 29-dic-2010, 14:33:45
 */
package guicomecocos;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import motor_comecocos.MotorComecocos;

/**
 * Clase principal de la interfaz. Es la ventana que muestra todo el juego
 * @author juanmi
 */
public class ComecocosFrame extends javax.swing.JFrame {

    // Ruta del archivo de los records
    protected final String archivo_records = "records.dat";
    protected MotorComecocos motor;
    protected ConfiguracionGUI cgui;
    protected GestorSonido gestor_sonido;
    protected boolean pausado; // Indica si se ha pausado a conciencia el juego
    protected GestorRecords gr;
    protected boolean partida_cargada = false; // Indica si se ha cargado la partida

    public ComecocosFrame() {
        initComponents();
        panelMapa1.requestFocus();
        cgui = new ConfiguracionGUI();
        gestor_sonido = new GestorSonido(this);
        pausado = false;
        this.cargarRecords();
        partida_cargada = false;
    }

    public void cambiarTema(int nuevo_tema) {
        this.cgui.cambiarTema(nuevo_tema);
    }

    public boolean getPausa() {
        return this.pausado;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMapa1 = new guicomecocos.PanelMapa(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_archivo = new javax.swing.JMenu();
        menu_item_nuevo = new javax.swing.JMenuItem();
        menu_item_salir = new javax.swing.JMenuItem();
        menu_edicion = new javax.swing.JMenu();
        menu_item_pausa = new javax.swing.JMenuItem();
        menu_item_salvar = new javax.swing.JMenuItem();
        menu_item_cargar = new javax.swing.JMenuItem();
        menu_configuracion = new javax.swing.JMenu();
        menu_item_modos = new javax.swing.JMenuItem();
        menu_item_teclas = new javax.swing.JMenuItem();
        menu_item_sonido = new javax.swing.JCheckBoxMenuItem();
        menu_records = new javax.swing.JMenu();
        menu_item_records = new javax.swing.JMenuItem();
        menu_ayuda = new javax.swing.JMenu();
        menu_item_ayuda = new javax.swing.JMenuItem();
        menu_item_acercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pacoman");

        panelMapa1.setPreferredSize(new java.awt.Dimension(700, 500));
        panelMapa1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panelMapa1ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout panelMapa1Layout = new javax.swing.GroupLayout(panelMapa1);
        panelMapa1.setLayout(panelMapa1Layout);
        panelMapa1Layout.setHorizontalGroup(
            panelMapa1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panelMapa1Layout.setVerticalGroup(
            panelMapa1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        getContentPane().add(panelMapa1, java.awt.BorderLayout.CENTER);

        menu_archivo.setText("Archivo");

        menu_item_nuevo.setText("Nuevo");
        menu_item_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_nuevoActionPerformed(evt);
            }
        });
        menu_archivo.add(menu_item_nuevo);

        menu_item_salir.setText("Salir");
        menu_item_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_salirActionPerformed(evt);
            }
        });
        menu_archivo.add(menu_item_salir);

        jMenuBar1.add(menu_archivo);

        menu_edicion.setText("Edición");

        menu_item_pausa.setText("Pausa");
        menu_item_pausa.setEnabled(false);
        menu_item_pausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_pausaActionPerformed(evt);
            }
        });
        menu_edicion.add(menu_item_pausa);

        menu_item_salvar.setText("Salvar partida");
        menu_item_salvar.setEnabled(false);
        menu_item_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_salvarActionPerformed(evt);
            }
        });
        menu_edicion.add(menu_item_salvar);

        menu_item_cargar.setText("Cargar partida");
        menu_item_cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_cargarActionPerformed(evt);
            }
        });
        menu_edicion.add(menu_item_cargar);

        jMenuBar1.add(menu_edicion);

        menu_configuracion.setText("Configuración");

        menu_item_modos.setText("Modo");
        menu_item_modos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_modosActionPerformed(evt);
            }
        });
        menu_configuracion.add(menu_item_modos);

        menu_item_teclas.setText("Teclas");
        menu_item_teclas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_teclasActionPerformed(evt);
            }
        });
        menu_configuracion.add(menu_item_teclas);

        menu_item_sonido.setSelected(true);
        menu_item_sonido.setText("Sonido");
        menu_item_sonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_sonidoActionPerformed(evt);
            }
        });
        menu_configuracion.add(menu_item_sonido);

        jMenuBar1.add(menu_configuracion);

        menu_records.setText("Récords");

        menu_item_records.setText("Ver récords");
        menu_item_records.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_recordsActionPerformed(evt);
            }
        });
        menu_records.add(menu_item_records);

        jMenuBar1.add(menu_records);

        menu_ayuda.setText("Ayuda");

        menu_item_ayuda.setText("Ayuda");
        menu_item_ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_ayudaActionPerformed(evt);
            }
        });
        menu_ayuda.add(menu_item_ayuda);

        menu_item_acercade.setText("Acerca de");
        menu_item_acercade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_acercadeActionPerformed(evt);
            }
        });
        menu_ayuda.add(menu_item_acercade);

        jMenuBar1.add(menu_ayuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panelMapa1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelMapa1ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_panelMapa1ComponentResized

    private void menu_item_acercadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_acercadeActionPerformed
        JOptionPane.showMessageDialog(this, "Alumnos:\n"
                + "Juan Miguel Lechuga Pérez\n\n"
                + "Francisco Jesús Delgado Almirón\n"
                + "Nuevas Tecnologías de la Programación 2.010 - 2.011\n",
                "Acerca de Pacoman", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_menu_item_acercadeActionPerformed

    private void menu_item_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_salirActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Cerrar Pacoman?",
                "Pacoman",
                JOptionPane.YES_NO_OPTION) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_menu_item_salirActionPerformed

    private void menu_item_recordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_recordsActionPerformed
        MostrarRecordsDialog mrd = new MostrarRecordsDialog(this);
        mrd.setLocationRelativeTo(this);
        mrd.setVisible(true);
    }//GEN-LAST:event_menu_item_recordsActionPerformed

    private void menu_item_pausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_pausaActionPerformed
        if (this.pausado) {
            pausado = false;
            motor.reanudarJuego();
        } else {
            pausado = true;
            motor.pausarJuego();
        }
    }//GEN-LAST:event_menu_item_pausaActionPerformed

    private void menu_item_teclasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_teclasActionPerformed
        ConfiguracionTeclasDialog teclas = new ConfiguracionTeclasDialog(this);
        teclas.setLocationRelativeTo(this);
        teclas.setVisible(true);
    }//GEN-LAST:event_menu_item_teclasActionPerformed

    private void menu_item_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_nuevoActionPerformed
        NuevaPartidaDialog nuevaPartidaDialog = new NuevaPartidaDialog(this);
        nuevaPartidaDialog.setLocationRelativeTo(this);
        nuevaPartidaDialog.setVisible(true);
    }//GEN-LAST:event_menu_item_nuevoActionPerformed

    private void menu_item_modosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_modosActionPerformed
        ConfiguracionTemaDialog tema = new ConfiguracionTemaDialog(this);
        tema.setLocationRelativeTo(this);
        tema.setVisible(true);
    }//GEN-LAST:event_menu_item_modosActionPerformed

    private void menu_item_ayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_ayudaActionPerformed
        AyudaDialog ayuda = new AyudaDialog(this);
        ayuda.setLocationRelativeTo(this);
        ayuda.setVisible(true);
    }//GEN-LAST:event_menu_item_ayudaActionPerformed

    private void menu_item_sonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_sonidoActionPerformed
        this.cgui.setSonido(menu_item_sonido.isSelected());
    }//GEN-LAST:event_menu_item_sonidoActionPerformed

    private void menu_item_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_salvarActionPerformed
        motor.pausarJuego();
        pausado = true;
        JFileChooser jfc = new JFileChooser();
        int valor = jfc.showSaveDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            boolean ok = this.motor.guardarPartida(jfc.getSelectedFile());
            if (ok) {
                JOptionPane.showMessageDialog(this, "Juego guardado correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Hubo un error al guardar la partida", "Mal :(", JOptionPane.ERROR_MESSAGE);
            }
        }
        pausado = false;
        motor.reanudarJuego();
    }//GEN-LAST:event_menu_item_salvarActionPerformed

    private void menu_item_cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_cargarActionPerformed
        JFileChooser jfc = new JFileChooser();
        int valor = jfc.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            if (this.motor == null) {
                this.motor = new MotorComecocos(this);
            }
            this.partida_cargada = true;
            this.menu_item_salvar.setEnabled(true);
            this.menu_item_pausa.setEnabled(true);
            this.motor.cargarPartida(jfc.getSelectedFile());
            this.panelMapa1.recargarImagenes();
        }
    }//GEN-LAST:event_menu_item_cargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ComecocosFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menu_archivo;
    private javax.swing.JMenu menu_ayuda;
    private javax.swing.JMenu menu_configuracion;
    private javax.swing.JMenu menu_edicion;
    private javax.swing.JMenuItem menu_item_acercade;
    private javax.swing.JMenuItem menu_item_ayuda;
    private javax.swing.JMenuItem menu_item_cargar;
    private javax.swing.JMenuItem menu_item_modos;
    private javax.swing.JMenuItem menu_item_nuevo;
    private javax.swing.JMenuItem menu_item_pausa;
    private javax.swing.JMenuItem menu_item_records;
    private javax.swing.JMenuItem menu_item_salir;
    private javax.swing.JMenuItem menu_item_salvar;
    private javax.swing.JCheckBoxMenuItem menu_item_sonido;
    private javax.swing.JMenuItem menu_item_teclas;
    private javax.swing.JMenu menu_records;
    private guicomecocos.PanelMapa panelMapa1;
    // End of variables declaration//GEN-END:variables

    public JPanel getPanel() {
        return this.panelMapa1;
    }

    public MotorComecocos getMotor() {
        return this.motor;
    }

    // Reproducir sonidos
    public void reproducirWaka() {
        this.gestor_sonido.reproducir(GestorSonido.SONIDO_WAKA);
    }

    public void reproducirInicio() {
        this.gestor_sonido.reproducir(GestorSonido.SONIDO_INICIO);
    }

    public void reproducirMuerte() {
        this.gestor_sonido.reproducir(GestorSonido.SONIDO_MUERTE);
    }

    // Genera una nueva partida de comecocos
    void nuevaPartida(int nivel, boolean multijugador, int mapa_elegido) {
        motor = new MotorComecocos(this);
        this.panelMapa1.recargarImagenes();
        partida_cargada = false;
        this.menu_item_pausa.setEnabled(true);
        this.menu_item_salvar.setEnabled(true);
        this.motor.nuevaPartida(nivel, multijugador, cgui.mapas.get(mapa_elegido));
    }

    // Indica que ha acabado el juego
    public void finJuego() {
        this.menu_item_pausa.setEnabled(false);
        this.menu_item_salvar.setEnabled(false);
        int jugadores = this.motor.getNumJugadores();
        if (jugadores > 1) { // Multijugador, no guarda records porque es mas facil el juego y romperia la clasificacion
            int puntos_j1 = this.motor.getPuntos(0);
            int puntos_j2 = this.motor.getPuntos(1);
            if (puntos_j1 < puntos_j2) {
                JOptionPane.showMessageDialog(this, "Ganador jugador 2 con " + puntos_j2 + " puntos.", "Fin del juego", JOptionPane.INFORMATION_MESSAGE);
            } else if (puntos_j2 < puntos_j1) {
                JOptionPane.showMessageDialog(this, "Ganador jugador 1 con " + puntos_j1 + " puntos.", "Fin del juego", JOptionPane.INFORMATION_MESSAGE);
            } else { // Empates
                JOptionPane.showMessageDialog(this, "Empates con " + puntos_j1 + " puntos.", "Fin del juego", JOptionPane.INFORMATION_MESSAGE);
            }
        } else { // Comprobar si guarda los records
            if (partida_cargada) { // Si se ha cargado la partida se descarta guardar el record
                JOptionPane.showMessageDialog(this, "Game Over", "Fin del juego", JOptionPane.WARNING_MESSAGE);
            } else {
                int puntos = this.motor.getPuntos(0);
                int mapa = this.cgui.mapas.indexOf(this.motor.getEstadoJuego().datos_mapa);
                int posicion = this.gr.esRecord(mapa, puntos);
                if (posicion != -1) { // COmprueba si entra en la clasificacion
                    Record r = new Record();
                    r.nivel = this.motor.getNivel();
                    r.puntos = puntos;
                    long t = this.motor.getTiempoJuego() / 1000;
                    r.tiempo = String.format("%02d:", t / 60) + String.format("%02d", t % 60);

                    NuevoRecordDialog nrd = new NuevoRecordDialog(this, r);
                    nrd.setTitle("Nuevo record");
                    nrd.setLocationRelativeTo(this);
                    nrd.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Game Over", "Fin del juego", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }

    ArrayList<Record> getRecords(int i) {
        return this.gr.getRecord(i);
    }

    void anadirNuevoRecord(Record record) {
        int mapa = this.cgui.mapas.indexOf(this.motor.getEstadoJuego().datos_mapa);
        this.gr.anadirRecord(mapa, record);
        this.guardarRecords();
    }

    private void cargarRecords() {
        File archivo = new File(archivo_records);
        if (archivo.exists()) {
            // Cargar
            try {
                FileInputStream fis = new FileInputStream(archivo);
                ObjectInputStream ois = new ObjectInputStream(fis);
                this.gr = (GestorRecords) ois.readObject();
                ois.close();
            } catch (Exception e) {
                Logger.getLogger(ComecocosFrame.class.getName()).log(Level.SEVERE, null, e);
            }

        } else {
            gr = new GestorRecords(this);
        }
    }

    private void guardarRecords() {
        File archivo = new File(archivo_records);
        try {
            FileOutputStream fos = new FileOutputStream(archivo);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(this.gr);
            oos.close();
        } catch (Exception ex) {
            Logger.getLogger(ComecocosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
