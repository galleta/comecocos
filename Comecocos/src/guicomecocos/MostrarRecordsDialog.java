package guicomecocos;

import java.util.ArrayList;
import java.util.ListIterator;
import javax.swing.table.TableModel;
import motor_comecocos.DatosMapa;

public class MostrarRecordsDialog extends javax.swing.JDialog {
    private ComecocosFrame frame;

    /** Creates new form MostrarRecordsDialog */
    public MostrarRecordsDialog(ComecocosFrame cf) {
        super(cf, true);
        frame = cf;
        initComponents();
        // Borramos el contenido del combobox y cargamos el de los mapas
        this.combobox_mapa.removeAllItems();
        ListIterator<DatosMapa> i = this.frame.cgui.mapas.listIterator();
        while (i.hasNext()) {
            DatosMapa dm = i.next();
            this.combobox_mapa.addItem(dm.nombre);
        }
        // Actualizamos los records de la tabla
        this.actualizarTabla(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combobox_mapa = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_records = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Records");
        setAlwaysOnTop(true);
        setResizable(false);

        jLabel1.setText("Mapa:");

        combobox_mapa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pollos" }));
        combobox_mapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_mapaActionPerformed(evt);
            }
        });

        tabla_records.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Posicion", "Nombre", "Nivel", "Tiempo", "Puntos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_records.setFocusable(false);
        tabla_records.setShowHorizontalLines(false);
        tabla_records.setShowVerticalLines(false);
        tabla_records.getTableHeader().setResizingAllowed(false);
        tabla_records.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_records);
        tabla_records.getColumnModel().getColumn(0).setResizable(false);
        tabla_records.getColumnModel().getColumn(1).setResizable(false);
        tabla_records.getColumnModel().getColumn(2).setResizable(false);
        tabla_records.getColumnModel().getColumn(3).setResizable(false);
        tabla_records.getColumnModel().getColumn(4).setResizable(false);

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox_mapa, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobox_mapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void combobox_mapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_mapaActionPerformed
        int indice = combobox_mapa.getSelectedIndex();
        if (indice >= 0) {
            this.actualizarTabla(indice);
        }
    }//GEN-LAST:event_combobox_mapaActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combobox_mapa;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_records;
    // End of variables declaration//GEN-END:variables

    // Actualiza la tabla de records dependiendo del mapa seleccionado
    private void actualizarTabla(int mapa) {
        ArrayList<Record> records = this.frame.getRecords(mapa);
        TableModel tm = this.tabla_records.getModel();
        ListIterator<Record> i = records.listIterator();
        while (i.hasNext()) {
            int indice = i.nextIndex();
            Record r = i.next();
            tm.setValueAt(indice + 1, indice, 0);
            tm.setValueAt(r.nombre, indice, 1);
            tm.setValueAt(r.nivel, indice, 2);
            tm.setValueAt(r.tiempo, indice, 3);
            tm.setValueAt(r.puntos, indice, 4);
        }
    }
}
